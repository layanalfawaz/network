package javaapplication4;

import java.io.*;
import java.net.Socket;
import java.util.ArrayList;

public class NewClient implements Runnable {

    private final Socket client;
    private final BufferedReader in;
    private final PrintWriter out;
    private final ArrayList<NewClient> clients;

    private String userName = null;
    private String roomType = null;   // standard | premium | suite
    private String chosenDate = null; // YYYY-MM-DD

    public NewClient(Socket c, ArrayList<NewClient> clients) throws IOException {
        this.client = c;
        this.clients = clients;
        this.in  = new BufferedReader(new InputStreamReader(client.getInputStream()));
        this.out = new PrintWriter(client.getOutputStream(), true);
    }

    @Override
    public void run() {
        try {
            // ===== 1) Login/Register (Task 1) =====
            out.println("Enter username:");
            String username = in.readLine();

            out.println("Enter password:");
            String password = in.readLine();

            synchronized (NewServer.usernames) {
                int idx = NewServer.usernames.indexOf(username);
                if (idx == -1) {
                    NewServer.usernames.add(username);
                    NewServer.passwords.add(password);
                    out.println("OK,Connected");
                } else if (NewServer.passwords.get(idx).equals(password)) {
                    out.println("OK,Connected");
                } else {
                    out.println("WRONG_PASSWORD");
                    closeQuiet();
                    return;
                }
            }
            this.userName = username;

            // ===== 2) Ask for ROOM TYPE (always asked!) =====
            out.println("Choose room type (standard/premium/suite):");
            roomType = in.readLine();   // e.g. "standard"

            // ===== 3) Ask for DATE =====
            out.println("Enter date (YYYY-MM-DD):");
            chosenDate = in.readLine(); // e.g. "2025-10-17"

            // ===== 4) Show available rooms for this type/date =====
            out.println("AVAILABLE:");
            String list = listAvailableRooms();
            out.println(list.isEmpty() ? "No available rooms" : list);

            // ===== 5) Ask for room name and confirm (Task 2 + 3) =====
            out.println("Enter ROOM NAME to reserve (e.g., Sakura-1):");
            String roomName = in.readLine();

            String result = confirmReservation(roomName);
            out.println(result); // "OK,ReservationDone..." or an error text

            out.println("Done. Goodbye.");

        } catch (IOException e) {
            // connection closed
        } finally {
            closeQuiet();
        }
    }

    // List rooms of chosen type 
    private String listAvailableRooms() {
        if (roomType == null || chosenDate == null) return "";
        String[] rooms;
        if ("standard".equals(roomType)) {
            rooms = NewServer.standardRooms;
        } else if ("premium".equals(roomType)) {
            rooms = NewServer.premiumRooms;
        } else if ("suite".equals(roomType)) {
            rooms = NewServer.suiteRooms;
        } else {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (String r : rooms) {
            sb.append(r).append(' ');
        }
        return sb.toString().trim();
    }

    // Just confirmation text
    private String confirmReservation(String roomName) {
        if (roomType == null || chosenDate == null || roomName == null || roomName.isEmpty()) {
            return "ERR,MissingData";
        }
        boolean exists = false;
        if ("standard".equals(roomType)) {
            for (String r : NewServer.standardRooms) if (r.equals(roomName)) { exists = true; break; }
        } else if ("premium".equals(roomType)) {
            for (String r : NewServer.premiumRooms) if (r.equals(roomName)) { exists = true; break; }
        } else if ("suite".equals(roomType)) {
            for (String r : NewServer.suiteRooms) if (r.equals(roomName)) { exists = true; break; }
        }
        if (!exists) return "ERR,RoomNotInSelectedType";
        return "OK,ReservationDone for " + roomName + " on " + chosenDate + " (" + roomType + ")";
    }

    private void closeQuiet() {
        try { out.close(); } catch (Exception ignore) {}
        try { in.close(); } catch (Exception ignore) {}
        try { client.close(); } catch (Exception ignore) {}
    }
}
